package main

import (
	"fmt"
	"os"
	"os/signal"
	"syscall"

	_ "github.com/ansrivas/bid-tracker/docs" // docs is generated by Swag CLI, you have to import it.
	app "github.com/ansrivas/bid-tracker/pkg/api"
	"github.com/ansrivas/bid-tracker/pkg/bidtracker"
	swagger "github.com/arsmn/fiber-swagger/v2"
	"github.com/gofiber/fiber/v2"
	"github.com/gofiber/fiber/v2/middleware/recover"
	"github.com/gofrs/uuid"
	"github.com/rs/zerolog/log"
)

var (
	// BuildTime gets populated during the build proces
	BuildTime = ""

	//Version gets populated during the build process
	Version = ""
)

// @title Bid-Tracker API
// @version 1.0
// @description Bid-Tracker swagger implementations
// @termsOfService http://swagger.io/terms/
// @contact.name API Support
// @contact.email fiber@swagger.io
// @license.name Apache 2.0
// @license.url http://www.apache.org/licenses/LICENSE-2.0.html
// @host localhost:8080
// @BasePath /
func main() {
	fmt.Printf("Current version is: %s and buildtime is: %s\n", Version, BuildTime)

	biddableItems := []uuid.UUID{
		uuid.Must(uuid.FromString("b2f9ee6d-79fe-4b14-9c19-35a69a89219a")),
		uuid.Must(uuid.FromString("b16ab43e-aa13-4079-b8c5-592e81312c01")),
	}
	bidTracker := bidtracker.NewBidManagement(biddableItems...)

	server := fiber.New()

	server.Use("/swagger", swagger.Handler)            // default
	server.Use("/swagger", swagger.New(swagger.Config{ // custom
		URL:         "http://example.com/doc.json",
		DeepLinking: false,
	}))

	// Enable prefork ðŸš€
	// server.Settings.Prefork = true
	// Do not enable it yet because everything is in memory so each request will
	// see different responses.

	// Enable pprof end point
	// server.Use(pprof.New())

	// Logging middleware - also commented out for now
	// server.Use(logger.New(logger.Config{
	// 	// Optional
	// 	Format: "${time} ${method} ${path} - ${ip} - ${status} - ${latency}\n",
	// }))

	server.Use(recover.New())

	api := app.NewAPIWithSettings(bidTracker, server)
	err := app.RegisterRoutes(api,
		app.RegisterWithAPIVersion("/api/v1"),
	)
	if err != nil {
		log.Error().Msgf("Failed to register routes %s", err.Error())
		os.Exit(1)
	}

	// Register a ctrl-c handler
	errc := make(chan error)
	go func() {
		c := make(chan os.Signal)
		signal.Notify(c, syscall.SIGINT, syscall.SIGTERM)
		errc <- fmt.Errorf("%s", <-c)
	}()

	go func() {
		errc <- api.FiberApp().Listen(":3000")
	}()

	log.Info().Msgf("Exiting server. Message: %v", <-errc)

}
